
ROV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000150  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000793  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000680  00000000  00000000  000009ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000347  00000000  00000000  0000107f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  000013c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000375  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000056  00000000  00000000  000017d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001827  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_24>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <i2c_init>:
 */ 

#include "initialization.h"

void i2c_init(void){
	 TWCR |= (1<<TWEN)|(1<<TWIE)|(1<<TWEA)|(1<<TWINT); //enable i2c, enable interrupt, enable ACK, set flag
  80:	ec eb       	ldi	r30, 0xBC	; 188
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	85 6c       	ori	r24, 0xC5	; 197
  88:	80 83       	st	Z, r24
	 TWAR = 0x20; //slave address
  8a:	80 e2       	ldi	r24, 0x20	; 32
  8c:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	 TWSR = 0x00; //initialize status register as zero
  90:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  94:	08 95       	ret

00000096 <timer1_init>:
}

void timer1_init(void){
	TCCR1A |= (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1); //fast pwm, ICR as top, non-inverting mode
  96:	e0 e8       	ldi	r30, 0x80	; 128
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	82 6a       	ori	r24, 0xA2	; 162
  9e:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12) | (1<<WGM13) | (1<<CS11); //pre-scale 8
  a0:	e1 e8       	ldi	r30, 0x81	; 129
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	8a 61       	ori	r24, 0x1A	; 26
  a8:	80 83       	st	Z, r24
//	TIMSK1 |= (1<<TOIE1) | (1<<OCIE1A) | (1<<OCIE1B); //interrupts enable
	ICR1 = 40000; //top value
  aa:	80 e4       	ldi	r24, 0x40	; 64
  ac:	9c e9       	ldi	r25, 0x9C	; 156
  ae:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  b2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR1A = 20000; //pwm 1
  b6:	80 e2       	ldi	r24, 0x20	; 32
  b8:	9e e4       	ldi	r25, 0x4E	; 78
  ba:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  be:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = 10000; //pwm 2
  c2:	80 e1       	ldi	r24, 0x10	; 16
  c4:	97 e2       	ldi	r25, 0x27	; 39
  c6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  ca:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
  ce:	08 95       	ret

000000d0 <ports_init>:
}

void ports_init(void){
	DDRD = 0xFF; //port D as output
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF; //port B as output
  d4:	84 b9       	out	0x04, r24	; 4
  d6:	08 95       	ret

000000d8 <main>:
#include "initialization.h"


int main(void)
{
	i2c_init();
  d8:	0e 94 40 00 	call	0x80	; 0x80 <i2c_init>
	timer1_init();
  dc:	0e 94 4b 00 	call	0x96	; 0x96 <timer1_init>
	ports_init();
  e0:	0e 94 68 00 	call	0xd0	; 0xd0 <ports_init>

	sei();
  e4:	78 94       	sei
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <main+0xe>

000000e8 <__vector_24>:

    while (1);
}

ISR(TWI_vect){
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	8f 93       	push	r24
  f4:	ef 93       	push	r30
  f6:	ff 93       	push	r31
	switch (TWSR){
  f8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  fc:	80 38       	cpi	r24, 0x80	; 128
  fe:	69 f0       	breq	.+26     	; 0x11a <__vector_24+0x32>
 100:	80 3a       	cpi	r24, 0xA0	; 160
 102:	b9 f0       	breq	.+46     	; 0x132 <__vector_24+0x4a>
 104:	80 36       	cpi	r24, 0x60	; 96
 106:	d1 f4       	brne	.+52     	; 0x13c <__vector_24+0x54>
		case 0x60: //address + write
			TWCR |= (1<<TWINT)|(1<<TWEA);
 108:	ec eb       	ldi	r30, 0xBC	; 188
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	80 6c       	ori	r24, 0xC0	; 192
 110:	80 83       	st	Z, r24
			TWCR &= ~(1<<TWSTO);
 112:	80 81       	ld	r24, Z
 114:	8f 7e       	andi	r24, 0xEF	; 239
 116:	80 83       	st	Z, r24
			break;
 118:	11 c0       	rjmp	.+34     	; 0x13c <__vector_24+0x54>
		case 0x80: //data
			TWCR |= (1<<TWINT)|(1<<TWEA);
 11a:	ec eb       	ldi	r30, 0xBC	; 188
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	80 6c       	ori	r24, 0xC0	; 192
 122:	80 83       	st	Z, r24
			TWCR &= ~(1<<TWSTO);
 124:	80 81       	ld	r24, Z
 126:	8f 7e       	andi	r24, 0xEF	; 239
 128:	80 83       	st	Z, r24
			PORTB = TWDR; //output data to port D
 12a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 12e:	85 b9       	out	0x05, r24	; 5
			break;
 130:	05 c0       	rjmp	.+10     	; 0x13c <__vector_24+0x54>
		case 0xA0: //stop or restart
			TWCR |= (1<<TWINT);
 132:	ec eb       	ldi	r30, 0xBC	; 188
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	80 68       	ori	r24, 0x80	; 128
 13a:	80 83       	st	Z, r24
			break;
	}
}
 13c:	ff 91       	pop	r31
 13e:	ef 91       	pop	r30
 140:	8f 91       	pop	r24
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
