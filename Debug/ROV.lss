
ROV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000002a8  0000033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800118  00800118  00000354  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008bd  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e3  00000000  00000000  00000ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003cd  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  0000179c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d5  00000000  00000000  000018a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000176  00000000  00000000  00001c75  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001deb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_11>
  30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_12>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 00 01 	jmp	0x200	; 0x200 <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ea       	ldi	r30, 0xA8	; 168
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 31       	cpi	r26, 0x1E	; 30
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:
 */ 

#include "initialization.h"

void i2c_init(void){
	 TWCR |= (1<<TWEN)|(1<<TWIE)|(1<<TWEA)|(1<<TWINT); //enable i2c, enable interrupt, enable ACK, set flag
  a6:	ec eb       	ldi	r30, 0xBC	; 188
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	85 6c       	ori	r24, 0xC5	; 197
  ae:	80 83       	st	Z, r24
	 TWAR = 20; //slave address
  b0:	84 e1       	ldi	r24, 0x14	; 20
  b2:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	 TWSR = 0x00; //initialize status register as zero
  b6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  ba:	08 95       	ret

000000bc <timer1_init>:
}

void timer1_init(void){
	TCCR1A |= (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1); //fast pwm, ICR as top, non-inverting mode
  bc:	e0 e8       	ldi	r30, 0x80	; 128
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	82 6a       	ori	r24, 0xA2	; 162
  c4:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12) | (1<<WGM13) | (1<<CS11); //pre-scale 8
  c6:	e1 e8       	ldi	r30, 0x81	; 129
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	8a 61       	ori	r24, 0x1A	; 26
  ce:	80 83       	st	Z, r24
	TIMSK1 |= (1<<TOIE1) | (1<<OCIE1A) | (1<<OCIE1B); //interrupts enable
  d0:	ef e6       	ldi	r30, 0x6F	; 111
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	87 60       	ori	r24, 0x07	; 7
  d8:	80 83       	st	Z, r24
	ICR1 = 39999; //top value
  da:	8f e3       	ldi	r24, 0x3F	; 63
  dc:	9c e9       	ldi	r25, 0x9C	; 156
  de:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  e2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
  e6:	08 95       	ret

000000e8 <ports_init>:
}

void ports_init(void){
	DDRD = 0xFF; //port D as output
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF; //port B as output
  ec:	84 b9       	out	0x04, r24	; 4
  ee:	08 95       	ret

000000f0 <main>:
volatile uint8_t bytes[2]={0,0};
volatile uint16_t twoBytes;

int main(void)
{
	i2c_init(); //i2c
  f0:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>
	OCR1A = compare1[PWMcount];
  f4:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <PWMcount>
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	ee 0f       	add	r30, r30
  fc:	ff 1f       	adc	r31, r31
  fe:	e4 5f       	subi	r30, 0xF4	; 244
 100:	fe 4f       	sbci	r31, 0xFE	; 254
 102:	80 81       	ld	r24, Z
 104:	91 81       	ldd	r25, Z+1	; 0x01
 106:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 10a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	timer1_init(); //timer1
 10e:	0e 94 5e 00 	call	0xbc	; 0xbc <timer1_init>
	ports_init(); //ports
 112:	0e 94 74 00 	call	0xe8	; 0xe8 <ports_init>
 

	sei(); //global interrupt enable
 116:	78 94       	sei
 118:	ff cf       	rjmp	.-2      	; 0x118 <main+0x28>

0000011a <__vector_11>:

    while(1);
} 

ISR(TIMER1_COMPA_vect){
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	2f 93       	push	r18
 126:	3f 93       	push	r19
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
 12c:	ef 93       	push	r30
 12e:	ff 93       	push	r31
	PORTD |= (1<<PWMcount); //set pin
 130:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <PWMcount>
 134:	2b b1       	in	r18, 0x0b	; 11
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <__vector_11+0x26>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	3a 95       	dec	r19
 142:	e2 f7       	brpl	.-8      	; 0x13c <__vector_11+0x22>
 144:	82 2b       	or	r24, r18
 146:	8b b9       	out	0x0b, r24	; 11
	OCR1B = compare1[PWMcount] + compare2[PWMcount]; //set pulse width
 148:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <PWMcount>
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	ee 0f       	add	r30, r30
 150:	ff 1f       	adc	r31, r31
 152:	e4 5f       	subi	r30, 0xF4	; 244
 154:	fe 4f       	sbci	r31, 0xFE	; 254
 156:	20 81       	ld	r18, Z
 158:	31 81       	ldd	r19, Z+1	; 0x01
 15a:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <PWMcount>
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	ee 0f       	add	r30, r30
 162:	ff 1f       	adc	r31, r31
 164:	e0 50       	subi	r30, 0x00	; 0
 166:	ff 4f       	sbci	r31, 0xFF	; 255
 168:	80 81       	ld	r24, Z
 16a:	91 81       	ldd	r25, Z+1	; 0x01
 16c:	82 0f       	add	r24, r18
 16e:	93 1f       	adc	r25, r19
 170:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 174:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	OCR1A = compare1[PWMcount];
 178:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <PWMcount>
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	ee 0f       	add	r30, r30
 180:	ff 1f       	adc	r31, r31
 182:	e4 5f       	subi	r30, 0xF4	; 244
 184:	fe 4f       	sbci	r31, 0xFE	; 254
 186:	80 81       	ld	r24, Z
 188:	91 81       	ldd	r25, Z+1	; 0x01
 18a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 18e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
} 
 192:	ff 91       	pop	r31
 194:	ef 91       	pop	r30
 196:	9f 91       	pop	r25
 198:	8f 91       	pop	r24
 19a:	3f 91       	pop	r19
 19c:	2f 91       	pop	r18
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <__vector_12>:

ISR(TIMER1_COMPB_vect){
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
	PORTD &= ~(1<<PWMcount); //reset pin
 1ba:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <PWMcount>
 1be:	2b b1       	in	r18, 0x0b	; 11
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <__vector_12+0x22>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	3a 95       	dec	r19
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <__vector_12+0x1e>
 1ce:	80 95       	com	r24
 1d0:	90 95       	com	r25
 1d2:	82 23       	and	r24, r18
 1d4:	8b b9       	out	0x0b, r24	; 11
	if(PWMcount == 5){PWMcount = 0;} //reset counter
 1d6:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <PWMcount>
 1da:	85 30       	cpi	r24, 0x05	; 5
 1dc:	19 f4       	brne	.+6      	; 0x1e4 <__vector_12+0x3c>
 1de:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <PWMcount>
 1e2:	05 c0       	rjmp	.+10     	; 0x1ee <__vector_12+0x46>
	else{PWMcount++;} //increment counter
 1e4:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <PWMcount>
 1e8:	8f 5f       	subi	r24, 0xFF	; 255
 1ea:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <PWMcount>
//	OCR1A = compare1[PWMcount]; //set base value for the next thruster
}
 1ee:	9f 91       	pop	r25
 1f0:	8f 91       	pop	r24
 1f2:	3f 91       	pop	r19
 1f4:	2f 91       	pop	r18
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <__vector_24>:

ISR(TWI_vect){ //i2c interrupt
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	2f 93       	push	r18
 20c:	8f 93       	push	r24
 20e:	9f 93       	push	r25
 210:	ef 93       	push	r30
 212:	ff 93       	push	r31
	switch (TWSR){
 214:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 218:	80 38       	cpi	r24, 0x80	; 128
 21a:	69 f0       	breq	.+26     	; 0x236 <__vector_24+0x36>
 21c:	80 3a       	cpi	r24, 0xA0	; 160
 21e:	09 f1       	breq	.+66     	; 0x262 <__vector_24+0x62>
 220:	80 36       	cpi	r24, 0x60	; 96
 222:	21 f5       	brne	.+72     	; 0x26c <__vector_24+0x6c>
		case 0x60: //address + write
			TWCR |= (1<<TWINT)|(1<<TWEA);
 224:	ec eb       	ldi	r30, 0xBC	; 188
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	80 6c       	ori	r24, 0xC0	; 192
 22c:	80 83       	st	Z, r24
			TWCR &= ~(1<<TWSTO);
 22e:	80 81       	ld	r24, Z
 230:	8f 7e       	andi	r24, 0xEF	; 239
 232:	80 83       	st	Z, r24
			break;
 234:	1b c0       	rjmp	.+54     	; 0x26c <__vector_24+0x6c>
		case 0x80: //data
			TWCR |= (1<<TWINT)|(1<<TWEA);
 236:	ec eb       	ldi	r30, 0xBC	; 188
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	80 6c       	ori	r24, 0xC0	; 192
 23e:	80 83       	st	Z, r24
			TWCR &= ~(1<<TWSTO);
 240:	80 81       	ld	r24, Z
 242:	8f 7e       	andi	r24, 0xEF	; 239
 244:	80 83       	st	Z, r24
			bytes[TWIcount] = TWDR;
 246:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <TWIcount>
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 250:	e8 5e       	subi	r30, 0xE8	; 232
 252:	fe 4f       	sbci	r31, 0xFE	; 254
 254:	80 83       	st	Z, r24
			TWIcount++;
 256:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <TWIcount>
 25a:	8f 5f       	subi	r24, 0xFF	; 255
 25c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <TWIcount>
			break;
 260:	05 c0       	rjmp	.+10     	; 0x26c <__vector_24+0x6c>
		case 0xA0: //stop or restart
			TWCR |= (1<<TWINT);
 262:	ec eb       	ldi	r30, 0xBC	; 188
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	80 68       	ori	r24, 0x80	; 128
 26a:	80 83       	st	Z, r24
			break;
	}
	if(TWIcount==1){
 26c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <TWIcount>
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	71 f4       	brne	.+28     	; 0x290 <__vector_24+0x90>
		uint8_t lByte = bytes[1];
 274:	e8 e1       	ldi	r30, 0x18	; 24
 276:	f1 e0       	ldi	r31, 0x01	; 1
 278:	81 81       	ldd	r24, Z+1	; 0x01
		uint8_t hByte = bytes[0];
 27a:	20 81       	ld	r18, Z
		twoBytes = (hByte<<8) | lByte;
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	92 2b       	or	r25, r18
 280:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <twoBytes+0x1>
 284:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <twoBytes>
		bytes[0]=0; bytes[1]=0;
 288:	10 82       	st	Z, r1
 28a:	11 82       	std	Z+1, r1	; 0x01
		TWIcount=0;
 28c:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <TWIcount>
	}
 290:	ff 91       	pop	r31
 292:	ef 91       	pop	r30
 294:	9f 91       	pop	r25
 296:	8f 91       	pop	r24
 298:	2f 91       	pop	r18
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <_exit>:
 2a4:	f8 94       	cli

000002a6 <__stop_program>:
 2a6:	ff cf       	rjmp	.-2      	; 0x2a6 <__stop_program>
